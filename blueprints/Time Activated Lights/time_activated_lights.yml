blueprint:
  name: Time Activated Lights
  description: Turn on lights at a specific time.
  domain: automation

  input:
    time_on:
      name: Time to turn on lights.
      description: Time to turn on lights.
      default: '10:00:00'
      selector:
        time:

    time_off:
      name: Time to turn off lights.
      description: Time to turn off lights.
      default: '23:00:00'
      selector:
        time:

    light_target:
      name: Light to turn on when time is in.
      description: Lights to turn on when time is in.
      selector:
        target:
          entity:
            domain: light

variables:
  first_event: '{{ on_time if strptime(on_time,time_fmt).time() < strptime(off_time,time_fmt).time() else off_time }}'
  second_event: '{{ on_time if strptime(on_time,time_fmt).time() >= strptime(off_time,time_fmt).time() else off_time }}'

mode: single
max_exceeded: silent

trigger:
  - platform: time
    at: 
      - !input time_on
      - !input time_off

action:
  - choose:
    
    - conditions:
      - condition: template
        value_template: '{{ now().time() >= strptime(first_event, %H:%M:%S).time() and now().time() < strptime(second_event, %H:%M:%S).time() }}'
    
      sequence:
        - service: 'light.{{ "turn_on" if first_event == on_time else "turn_off" }}'
          target: !input light_target
    
    default:
      - service: 'light.{{ "turn_on" if second_event == on_time else "turn_off" }}'
        target: !input light_target
    
